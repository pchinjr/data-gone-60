AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: |
  Data Gone in 60 Seconds - Data Ingestion SAM Project with API Key Protection Receives POSTed metric batches, writes date‐partitioned JSON lines to S3, runs Athena queries by date, and dispatches results via SQS + external HTTP.

Parameters:
  RawDataBucketPrefix:
    Type: String
    Default: datagonein60-rawdata
    Description: |
      Prefix for your S3 bucket (the full name will be <prefix>-<AWS::AccountId>).

Globals:
  Function:
    Runtime: nodejs20.x
    Timeout: 30
    Tracing: Active

Resources:
  RawDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${RawDataBucketPrefix}-${AWS::AccountId}

  DataIngestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      TracingEnabled: true
      Auth:
        ApiKeyRequired: true
      MethodSettings:
        - ResourcePath: /*
          HttpMethod: '*'
          LoggingLevel: INFO
          DataTraceEnabled: true

  DataIngestFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ingestData.handler
      CodeUri: src/
      Environment:
        Variables:
          BUCKET_NAME: !Sub ${RawDataBucketPrefix}-${AWS::AccountId}
      Events:
        IngestAPI:
          Type: Api
          Properties:
            RestApiId: !Ref DataIngestApi
            Path: /ingest
            Method: post
      Policies:
        - S3WritePolicy:
            BucketName: !Sub ${RawDataBucketPrefix}-${AWS::AccountId}
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - src/ingestData.ts

  IngestApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: IngestApiKey
      Enabled: true

  IngestUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: DataIngestApiProdStage
    Properties:
      UsagePlanName: IngestUsagePlan
      ApiStages:
        - ApiId: !Ref DataIngestApi
          Stage: Prod

  IngestUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref IngestApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref IngestUsagePlan

  ProcessedDataQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ProcessedDataQueue

  AthenaQueryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: runAthenaQuery.handler
      CodeUri: src/
      Environment:
        Variables:
          ATHENA_DATABASE: my_athena_database
          ATHENA_TABLE: my_raw_data_table
          ATHENA_OUTPUT_LOCATION: !Sub s3://${RawDataBucketPrefix}-${AWS::AccountId}/transformed/
          SQS_QUEUE_URL: !GetAtt ProcessedDataQueue.QueueUrl
          QUERY_YEAR: '2025'
          QUERY_MONTH: '02'
          QUERY_DAY: '10'
      Policies:
        - Version: '2012-10-17'
          Statement:
            # Athena query execution
            - Sid: ExecuteAthenaQueries
              Effect: Allow
              Action:
                - athena:StartQueryExecution
                - athena:GetQueryExecution
                - athena:GetQueryResults
              Resource:
                - !Sub arn:aws:athena:${AWS::Region}:${AWS::AccountId}:workgroup/primary
                - !Sub arn:aws:athena:${AWS::Region}:${AWS::AccountId}:query/*

            # Athena metadata reads
            - Sid: ReadAthenaMetadata
              Effect: Allow
              Action:
                - athena:GetDataCatalog
                - athena:ListDataCatalogs
                - athena:GetDatabase
                - athena:ListDatabases
                - athena:GetTableMetadata
                - athena:ListTableMetadata
              Resource:
                - !Sub arn:aws:athena:${AWS::Region}:${AWS::AccountId}:datacatalog/AwsDataCatalog

            # Glue metastore reads
            - Sid: ReadGlueMetastore
              Effect: Allow
              Action:
                - glue:GetCatalogImportStatus
                - glue:GetDatabase
                - glue:GetTable
                - glue:GetDataCatalog
                - glue:GetPartition
              Resource:
                - !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog
                - !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/my_athena_database
                - !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/my_athena_database/my_raw_data_table

            # S3: bucket‐level (list & location) vs. object‐level (get/put)
            - Sid: S3BucketLevel
              Effect: Allow
              Action:
                - s3:ListBucket
                - s3:GetBucketLocation
              Resource:
                - !Sub arn:aws:s3:::${RawDataBucketPrefix}-${AWS::AccountId}

            - Sid: S3ObjectLevel
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource:
                - !Sub arn:aws:s3:::${RawDataBucketPrefix}-${AWS::AccountId}/*
                # note: this covers both raw/* and transformed/*

                # SQS send
            - Sid: SQSSend
              Effect: Allow
              Action:
                - sqs:SendMessage
              Resource:
                - !GetAtt ProcessedDataQueue.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - src/runAthenaQuery.ts

  SendToExternalBatchFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: sendToExternalBatch.handler
      CodeUri: src/
      Environment:
        Variables:
          EXTERNAL_ENDPOINT_URL: https://pchinjr-externaldatawarehouse.web.val.run
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt ProcessedDataQueue.Arn
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 10
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - src/sendToExternalBatch.ts

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL for the Data Ingest Function
    Value: !Sub https://${DataIngestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/ingest
  ApiKey:
    Description: API Key for accessing the Data Ingest API
    Value: !Ref IngestApiKey